{"name":"Motion Objection","tagline":"Wrapping Objection in RubyMotion.","body":"motion-objection\r\n================\r\n\r\nMotion-objection wraps the Objective-C dependency injection library [Objection](https://github.com/atomicobject/objection) in Ruby so that it can be used in [RubyMotion](http://www.rubymotion.com/). It has all of the power (and speed) of Objection and the declarative affordances that the Ruby language provides.\r\n\r\n<!-- [![Build Status](https://travis-ci.org/atomicobject/motion-objection.png)](https://travis-ci.org/atomicobject/motion-objection) -->\r\n[![Gem Version](https://badge.fury.io/rb/motion-objection.png)](http://badge.fury.io/rb/motion-objection)\r\n[![Code Climate](https://codeclimate.com/github/atomicobject/motion-objection.png)](https://codeclimate.com/github/atomicobject/motion-objection)\r\n\r\n## Installation\r\n\r\n\r\n```bash\r\ngem install motion-objection\r\n```\r\n\r\n## Basic Usage\r\n\r\nA class can declare requires component objects by mixing in <code>Objection::Compose</code> and calling the <code>.compose_with</code> method \r\n\r\n```ruby\r\nclass Car\r\n  include Objection::Compose\r\n  compose_with :engine, :brakes\r\nend\r\n```\r\n\r\nWhere <code>:engine</code> and <code>:brakes</code> are assumed to be the <code>Engine</code> and <code>Brakes</code> classes. Classes that are namespaced can be declared as well by separating the namespaces using the <code>/</code> character.\r\n\r\n```ruby\r\nclass Engine\r\n  include Objection::Compose\r\n  compose_with 'engine/crank_shaft', 'engine/rod'\r\n\r\n  class CrankShaft\r\n  end \r\n\r\n  class Rod\r\n  end\r\nend\r\n```\r\n\r\nSometimes you may need to declare the component object _and_ the class that is associated with it.\r\n\r\n```ruby\r\nclass Brakes\r\ncompose_with factory: JSObjectFactory\r\nend\r\n```\r\n\r\n## Singletons\r\n\r\nSingletons can be declared by calling the <code>.singleton</code> method in the class body. Singletons should really only be necessary if they contain _shared state_. Otherwise it behooves you to avoid singletons in order to reduce the memory footprint of an application.\r\n\r\n```ruby\r\nclass Holder\r\ninclude Objection::Compose\r\nsingleton\r\nend\r\n```\r\n\r\n## Default Initializers\r\n\r\nObjection uses [Key-Value Coding](http://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueCoding/Articles/KeyValueCoding.html) to compose an instance with its dependencies -- it does not use initializer injection.\r\n\r\nBy default Objection initializes an object using the <code>init</code> initializer. A custom initializer can be declared using the <code>.initializer</code> method.\r\n\r\n```ruby\r\nclass ViewController < UIViewController\r\n  include Objection::Compose\r\n  initializer \"initWithNibName:bundle:\", \"Home\"\r\n\r\n  attr_reader :name\r\n\r\n  def initWithNibName(name, bundle: bundle)\r\n    self.init\r\n    self.tap do\r\n      @name = name\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n## Modules\r\n\r\nModules contribution configuration information to the Injector. Typically, this includes bindings for dependencies that the Injector cannot provide. For example, <code>UIApplication.sharedApplication</code> or the main application window.\r\n\r\n```ruby\r\nclass AppModule < JSObjectionModule\r\n  def initialize(window, application: application)\r\n    @window = window\r\n    @application = application\r\n  end\r\n  \r\n  def configure\r\n    bind @window, toClass: UIWindow\r\n    bind @application, toClass: UIApplication\r\n  end\r\nend\r\n```\r\n\r\nThere are a number of other configuration methods a module [provides](https://github.com/atomicobject/objection#modules).\r\n\r\n## Bootstraping an Application\r\n\r\nTypically an application is bootstrapped in the application delegate where an injector is created and set as the default injector via <code>.default_injector=</code>.\r\n\r\n```ruby\r\nclass AppDelegate\r\n  def application(application, didFinishLaunchingWithOptions:launchOptions)\r\n    initialize_objection\r\n    Objection.default_injector[ApplicationBootstrapper].bootstrap!\r\n    true\r\n  end\r\n  \r\n    def initialize_objection\r\n    @window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)\r\n    injector = Objection.injector(BankersDashboardModule.new(@window, UIApplication.sharedApplication))\r\n    Objection.default_injector = injector\r\n  end\r\nend\r\n\r\nclass ApplicationBootstrapper\r\n  def bootstrap!\r\n    # Bootstrap\r\n  end\r\nend\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}